#!/bin/sh -e

#
# Copyright (c) 2024 Jaedeok Kim <jdeokkim@protonmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in 
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# Constants ==================================================================>

readonly argv_0=$(basename $0);
readonly argc=$#;

readonly fifo="/tmp/jmprof-fifo.$$";
readonly preload="libjmprof.so";

readonly author="jdeokkim (jdeokkim@protonmail.com)";
readonly version="0.0.5-dev"

# Function Definitions =======================================================>

# Cleans up temporary files and terminates this program.
cleanup() {
    log info "cleaning up";

    rm -f $fifo;
}

# Prints a message to the standard output stream.
log() {
    printf "jmprof: %s: %s\n" "$1" "$2";
}

# Prints an error message and terminates this program.
panic() {
    log error "$1";

    exit 1;
}

# Shows the 'help' message and terminates this program.
usage() {
    printf "Usage: %s [-h] [-v] <your-program>\n\n" $argv_0;

    printf "    -h  shows this 'help' message and exit\n";
    printf "    -v  displays version information\n";

    exit 1;
}

# Displays the version information for this program.
version() {
    printf "%s v%s by %s\n" $argv_0 $version "$author";

    exit 0;
}

# Entry Point ================================================================>

while getopts ":hv" opt; do
    case "$opt" in
        h)
            usage;

            ;;

        v)
            version;

            ;;

        :)
            printf "%s: option '-%s' " $argv_0 $OPTARG;
            printf "requires an argument\n";

            usage;

            ;;

        \?)
            printf "%s: option '-%s' " $argv_0 $OPTARG;
            printf "is invalid\n";

            usage;

            ;;
    esac
done

if [ -z $1 ]; then
    usage;
fi

# ============================================================================>

argv_1=$1;

if [ ! -f $argv_1 ]; then
    if ! command -v $1 >/dev/null; then
        panic "'$argv_1' is not a file";
    fi

    argv_1=$(command -v $1);
fi

if [ ! -x $argv_1 ]; then
    panic "file '$argv_1' is not executable";
fi

# ============================================================================>

trap cleanup EXIT INT KILL TERM;

log info "creating a named pipe '$fifo'";

mkfifo $fifo;

# ============================================================================>

ld_preload=$(ldconfig -p | grep $preload | awk -F ' ' '{ print $4 }');

log info "hijacking \`*alloc()\` calls via $ld_preload" && printf "\n";

LD_PRELOAD=$ld_preload FIFO=$fifo $@ &

# ============================================================================>

jmprof-ip $fifo;

# ============================================================================>